<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
<meta charset='UTF-8' />
<title>cmem-wasm debug</title>
	<script>//<![CDATA[
		window.cmemMod = null;
		window.cmem = null;
		window.view = null;

		let test;

		function reset(skipInit)
		{
			cmem = new WebAssembly.Instance(cmemMod).exports
			view = new Uint8Array(cmem.memory.buffer);
			if (!skipInit) cmem.init(0);
		}

		(() => {
			let failCount = 0;
			let totalCount = 0;

			function check(cond)
			{
				if (!cond)
				{
					console.error("Test failure");
					++failCount;
				}
				++totalCount;
			}

			function checkMem(expected)
			{
				if (!Uint8Array.from(expected).every((value, i) => value === view[i]))
				{
					console.error("Exp ", expected.toString(), '\nGot ', Array.from(view.slice(0, expected.length)).toString());
					++failCount;
				}
				++totalCount;
			}

			test = function runChecks()
			{
				failCount = totalCount = 0;
				let caught = false;
				let ptr1, ptr2, ptr3, ptr4;
				const begin = [0, 0, 0xFF, 0xFF, 6, 0];

				// list_push
				reset();
				let list = cmem.list_push(0, 1);
				cmem.list_push(list, 2);
				checkMem(begin.concat(
				[
					1, 0, 0, 0, 13, 0,
					0,
					2, 0, 6, 0, 0, 0,
					0, 0,
				]));

				// malloc
				// First allocation
				reset();
				ptr1 = cmem.malloc(8);
				check(ptr1 === 12);
				checkMem(begin.concat([
					8, 0, 0, 0, 0, 0,
				]));

				// Another allocation
				ptr1 = cmem.malloc(8);
				check(ptr1 === 26);

				// Exact fit
				cmem.malloc(8);
				cmem.free(ptr1);
				ptr2 = cmem.malloc(8)
				check(ptr1 === ptr2);

				// Just too short
				cmem.free(ptr1);
				ptr2 = cmem.malloc(9)
				check(ptr1 !== ptr2);

				// Gap longer than buffer
				ptr2 = cmem.malloc(7)
				check(ptr1 === ptr2);

				// Exhaust page
				reset();
				try
				{
					cmem.malloc(65535 - 12);
				} catch
				{
					++failCount;
				}
				++totalCount;

				// Exceed page
				reset();
				try
				{
					cmem.malloc(65535 - 11);
				} catch
				{
					caught = true;
				}
				++totalCount;
				if (!caught)
					++failCount;
				caught = false;

				// Swiss cheese
				reset();
				cmem.malloc(8);
				cmem.malloc(8);
				ptr1 = cmem.malloc(6);
				ptr2 = cmem.malloc(6);
				cmem.malloc(8);
				ptr3 = cmem.malloc(32);
				cmem.malloc(8);
				cmem.free(ptr1);
				cmem.free(ptr2);
				cmem.free(ptr3);
				ptr4 = cmem.malloc(18);
				check(ptr1 === ptr4);

				// realloc
				// Shrink
				reset();
				cmem.malloc(32);
				ptr1 = cmem.malloc(32);
				cmem.malloc(32);
				check(ptr1 === cmem.realloc(ptr1, 30));
				check(cmem.list_get(ptr1 - 6) === 30);

				// Grow behind self
				reset();
				cmem.malloc(32);
				ptr1 = cmem.malloc(32);
				ptr2 = cmem.malloc(2);
				cmem.malloc(32);
				cmem.free(ptr2);
				check(ptr1 === cmem.realloc(ptr1, 40));
				check(cmem.list_get(ptr1 - 6) === 40);

				// Grow before self
				reset();
				cmem.malloc(32);
				ptr1 = cmem.malloc(9);
				ptr2 = cmem.malloc(32);
				ptr3 = cmem.malloc(2);
				cmem.malloc(32);
				cmem.free(ptr1);
				ptr4 = cmem.malloc(1);
				cmem.free(ptr3);
				check(ptr4 === ptr1);
				ptr2 = cmem.realloc(ptr2, 48)
				check(ptr2 === ptr1 + 7);
				check(cmem.list_get(ptr2 - 6) === 48);
				check(cmem.list_prev(ptr2 - 6) === ptr1 - 6);
				check(cmem.list_next(ptr2 - 6) === ptr3 + 2);

				// Header won't fit
				reset();
				cmem.malloc(32);
				ptr1 = cmem.malloc(2);
				ptr2 = cmem.malloc(1);
				ptr3 = cmem.malloc(32);
				check(cmem.realloc(ptr1, 1) === ptr1);
				ptr4 = cmem.realloc(ptr2, 2);
				check(ptr4 === ptr3 + 32 + 6);

				// Insufficient space before self
				reset();
				cmem.malloc(32);
				ptr1 = cmem.malloc(9);
				ptr2 = cmem.malloc(1);
				ptr3 = cmem.malloc(32);
				cmem.realloc(ptr1, 1);
				ptr2 = cmem.realloc(ptr2, 10);
				check(ptr2 === ptr3 + 32 + 6);

				// memset
				reset(true);
				cmem.memset(1, 1, 1);
				cmem.memset(3, 2, 2);
				checkMem([0, 1, 0, 2, 2, 0, 0]);

				// memcpy
				cmem.memcpy(6, 1, 1);
				cmem.memcpy(8, 3, 2);
				cmem.memcpy(11, 1, 4);
				checkMem(
				[
					0, 1, 0, 2, 2, 0,
					1,
					0,
					2, 2,
					0,
					1, 0, 2, 2,
					0, 0
				]);

				// memmove
				// Overlapping at start of dest
				reset(true);
				for (let i = 1; i <= 4; ++i) { view[i] = i; }
				cmem.memmove(1, 0, 2);
				checkMem([0, 0, 1, 3, 4, 0]);

				// Overlapping at end of dest
				cmem.memmove(2, 3, 2);
				checkMem([0, 0, 3, 4, 4, 0]);

				// src before dest without overlap
				cmem.memmove(4, 2, 2);
				checkMem([0, 0, 3, 4, 3, 4]);

				// src after dest without overlap
				cmem.memmove(0, 2, 2);
				checkMem([3, 4, 3, 4, 3, 4]);

				// end
				reset();
				let len = 6;
				check(cmem.end() === len);
				ptr1 = cmem.malloc(8);
				len += 6 + 8;
				check(cmem.end() === len);
				cmem.calloc(4, 2);
				len += 6 + 4 * 2;
				check(cmem.end() === len);
				ptr1 = cmem.realloc(ptr1, 16);
				len += 6 + 16;
				check(cmem.end() === len);
				cmem.malloc(8);
				check(cmem.end() === len);
				cmem.free(ptr1);
				len -= 6 + 16;
				check(cmem.end() === len);

				reset();
				ptr1 = cmem.malloc(8);
				ptr2 = cmem.malloc(8);
				cmem.malloc(8);
				check(cmem.end() === 48)
				cmem.free(ptr1);
				cmem.realloc(ptr2, 22);
				check(cmem.end() === 48)
				cmem.realloc(ptr2, 23);
				check(cmem.end() === 77)

				console.log(totalCount - failCount, "/", totalCount, "tests succeeded");
			}
		})();

		fetch('out/cmem.wasm').then(response =>
			response.arrayBuffer()
		).then(buffer =>
		{
			cmemMod = new WebAssembly.Module(buffer);
			cmem = new WebAssembly.Instance(cmemMod).exports;
			console.log("cmem-wasm ready");
		}).then(test, error => console.error(error));

	//]]></script>
</head>
<body></body>
</html>
